-- generaly we put data into table in the form of normalisation
problem--lots of time required  to retrive the data 
--required more resource 
--Avoid number of data read

--delete --transaction log grow and table will be locked
facility--truncate one perticuler partition---help us to minimize transaction log growth 


solution--store relevent data  maintan trough E-R

vertical partitions-- we have one big table its spit into 2 or more table 
vertical partitions nothing but simply normalisation 
--physical read 0 means data in memory right now 
--minimize no of pages fitch from disk to memory
--data management very essy with partitioning 
--fist drop your schema then drop yr function
--need to tak ecaer merging partion contain lot  of data then log file grow rpidly 
--switch partion prerequsite should need same schema  
--while switch partion with diferent fill group you need to detach filegroup and attach file group
--swtich partition use for move the data my live db table to archieve db table(mata data operation--managae of data(data movment))
--lock only partition level
--optimiser take care of this
--stop application creaet partition start the application

---while creating index make sure ur new ncindex is alieng to partition schema


--partition Details

SELECT
    sc.name + N'.' + so.name as [Schema.Table],
    si.index_id as [Index ID],
    si.type_desc as [Structure],
    si.name as [Index],
    stat.row_count AS [Rows],
    stat.in_row_reserved_page_count * 8./1024./1024. as [In-Row GB],
    stat.lob_reserved_page_count * 8./1024./1024. as [LOB GB],
    p.partition_number AS [Partition #],
    pf.name as [Partition Function],
    CASE pf.boundary_value_on_right
        WHEN 1 then 'Right / Lower'
        ELSE 'Left / Upper'
    END as [Boundary Type],
    prv.value as [Boundary Point],
    fg.name as [Filegroup]
FROM sys.partition_functions AS pf
JOIN sys.partition_schemes as ps on ps.function_id=pf.function_id
JOIN sys.indexes as si on si.data_space_id=ps.data_space_id
JOIN sys.objects as so on si.object_id = so.object_id
JOIN sys.schemas as sc on so.schema_id = sc.schema_id
JOIN sys.partitions as p on 
    si.object_id=p.object_id 
    and si.index_id=p.index_id
LEFT JOIN sys.partition_range_values as prv on prv.function_id=pf.function_id
    and p.partition_number= 
        CASE pf.boundary_value_on_right WHEN 1
            THEN prv.boundary_id + 1
        ELSE prv.boundary_id
        END
        /* For left-based functions, partition_number = boundary_id, 
           for right-based functions we need to add 1 */
JOIN sys.dm_db_partition_stats as stat on stat.object_id=p.object_id
    and stat.index_id=p.index_id
    and stat.index_id=p.index_id and stat.partition_id=p.partition_id
    and stat.partition_number=p.partition_number
JOIN sys.allocation_units as au on au.container_id = p.hobt_id
    and au.type_desc ='IN_ROW_DATA' 
        /* Avoiding double rows for columnstore indexes. */
        /* We can pick up LOB page count from partition_stats */
JOIN sys.filegroups as fg on fg.data_space_id = au.data_space_id
ORDER BY [Schema.Table], [Index ID], [Partition Function], [Partition #];
GO

--Schema.Table: Schema name concatenated with table name
--Index ID: Included for reference and ordering
--Structure: This will decode if it’s a partitioned heap, clustered index, nonclustered index, clustered columnstore index, or nonclustered columnstore index
--Index Name: What it sounds like
--Rows: Number of rows in that partition
--In-Row GB: Reserved in-row pages for that partition
--LOB GB: Reserved LOB pages for that partition (reminder – columnstore indexes use LOB pages)
--Partition #: This can be useful in some queries. Remember that partition numbers are reassigned when you modify your partition function (split/merge)
--Partition Function Name: The partition function is the “algorithm” that defines the boundary points for the partitions
--Boundary Type: Whether the boundary point is a “right” type (lower inclusive boundary) or a “left” type (upper inclusive boundary)
--Boundary Point: The value of the boundary point that goes with that particular partition
--Filegroup: Where the data is located (defined by the partition scheme)
--note:  The partition scheme is what maps your partition function to the filegroups.

---  REORGANIZE PARTITION INDEX
ALTER INDEX [IX_xxxxxxxxxx] ON [Database].[Schema].[Table] REORGANIZE PARTITION = 1010 WITH (LOB_COMPACTION = ON)
