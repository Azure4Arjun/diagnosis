--worst query plans.sql
--Worst query plans in cache
--To find the worst queries and their plan(s), use Query Store (SQL 2016+)
--Table to capture this data at bottom

--INSERT INTO dbo.worstqueryplans
SELECT TOP 15 *
, Average_cpu						=	convert(decimal(19,2), tot_cpu_ms)/convert(decimal(19,2),usecounts)
, Average_Duration					=	convert(decimal(19,2),tot_duration_ms)/convert(decimal(19,2),usecounts)
, WorstQueryPlansObservedWhen		=	sysdatetime()
, DeleteQueryPlan					= 'ALTER DATABASE SCOPED CONFIGURATION CLEAR PROCEDURE_CACHE '+convert(varchar(512),PlanHandle,1) --delete just this plan, works in Azure SQL or SQL 2016+
--, DeleteQueryPlan	= 'DBCC FREEPROCCACHE('+convert(varchar(512),PlanHandle,1)+')'  --delete just this plan (old syntax)
FROM 
(
	SELECT 
		  PlanStats.CpuRank, PlanStats.PhysicalReadsRank, PlanStats.DurationRank --ranks, 1 = worst offender with highest number in this category
		, dbname = db_name(convert(int, pa.value))
		, cacheobjtype = LEFT(p.cacheobjtype + ' (' + p.objtype + ')', 35) 
	    , p.usecounts, p.size_in_bytes / 1024 AS size_in_kb,
		  PlanStats.total_worker_time/1000 AS tot_cpu_ms, PlanStats.total_elapsed_time/1000 AS tot_duration_ms, 
		  PlanStats.total_physical_reads, PlanStats.total_logical_writes, PlanStats.total_logical_reads,
		  PlanStats.last_execution_time
		, sql.objectid --if it's an object with the cached plan, look it up in the database name
		, [Procedure_name]	= CONVERT (nvarchar(75), CASE	WHEN sql.objectid IS NULL THEN NULL 
															ELSE --Find the procedure name even in the comments block
																	REPLACE (REPLACE (
																	substring(sql.[text], charindex('CREATE',sql.[text],0),100)
																	, CHAR(13), ' '), CHAR(10), ' ')
															END)
		, stmt_text			 = 	REPLACE (REPLACE (SUBSTRING (sql.[text], PlanStats.statement_start_offset/2 + 1, 
								  CASE WHEN PlanStats.statement_end_offset = -1 THEN LEN (CONVERT(nvarchar(max), sql.[text])) 
									ELSE PlanStats.statement_end_offset/2 - PlanStats.statement_start_offset/2 + 1
								  END), CHAR(13), ' '), CHAR(10), ' ') 
		, ReasonforEarlyTermination = CASE WHEN tqp.query_plan LIKE '%StatementOptmEarlyAbortReason%' 
											THEN substring(substring(tqp.query_plan, charindex('EarlyAbortReason', tqp.query_plan,1)+18, 21), 1, ISNULL(ABS(charindex('"',substring(tqp.query_plan, charindex('EarlyAbortReason', tqp.query_plan,1)+18, 21),1)-1),0))
											ELSE NULL END 
		, QueryPlan			=	qp.query_plan	
		, PlanHandle		=	p.plan_handle
		FROM 
		(
		  SELECT 
			stat.plan_handle, statement_start_offset, statement_end_offset, 
			stat.total_worker_time, stat.total_elapsed_time, stat.total_physical_reads, 
			stat.total_logical_writes, stat.total_logical_reads, stat.last_execution_time, 
			ROW_NUMBER() OVER (ORDER BY stat.total_worker_time DESC) AS CpuRank, 
			ROW_NUMBER() OVER (ORDER BY stat.total_physical_reads DESC) AS PhysicalReadsRank, 
			ROW_NUMBER() OVER (ORDER BY stat.total_elapsed_time DESC) AS DurationRank 
		  FROM sys.dm_exec_query_stats stat 
		  where creation_time > '1/16/2014 7:00'
  
		) AS PlanStats 
		INNER JOIN sys.dm_exec_cached_plans p ON p.plan_handle = PlanStats.plan_handle 
		OUTER APPLY sys.dm_exec_plan_attributes (p.plan_handle) pa 
		OUTER APPLY sys.dm_exec_sql_text (p.plan_handle) AS sql
		inner join sys.databases d on d.database_id = pa.value
		OUTER APPLY sys.dm_exec_query_plan (p.plan_handle) qp
		OUTER APPLY sys.dm_exec_text_query_plan(p.plan_handle, 
                                                PlanStats.statement_start_offset, 
                                                PlanStats.statement_end_offset) AS tqp 
		WHERE 1=1
		  AND pa.attribute = 'dbid' 
		  and usecounts > 1 --ignore once-used plans in plan cache
		  AND (CONVERT(nvarchar(max), sql.[text])) not like '%StatementOptmEarlyAbortReason%'
		  --and (sql.text like '%SH_View_Utilization_Detail%' )
		  --AND (tqp.query_plan LIKE '%StatementOptmEarlyAbortReason="TimeOut%' or tqp.query_plan LIKE '%StatementOptmEarlyAbortReason="Memory Limit%')
) x
--WHERE dbname = N'whateverdatabasename'
ORDER BY CpuRank + PhysicalReadsRank + DurationRank asc; 

--select * from dbo.worstqueryplans

/*----------------
--For SQL 2000 only
SELECT 
UseCounts, RefCounts,CacheObjtype, ObjType, DB_NAME(dbid) as DatabaseName, SQL
FROM sys.syscacheobjects
where sql like '%mtblFeeEndorsement%'
ORDER BY dbid,usecounts DESC,objtype
GO
-----------------*/
/*
--Samples to clear plans out of the plan cache
ALTER DATABASE SCOPED CONFIGURATION CLEAR PROCEDURE_CACHE; --delete all plans, works in Azure SQL or SQL 2016+
ALTER DATABASE SCOPED CONFIGURATION CLEAR PROCEDURE_CACHE 0x060001004EE9FD0570E185E06F02000001000000000000000000000000000000000000000000000000000000 --delete just this plan, works in Azure SQL or SQL 2016+
*/
/*
--table to capture this data
USE [tempdb]
GO
DROP TABLE IF EXISTS [dbo].[worstqueryplans]
CREATE TABLE [dbo].[worstqueryplans](
	[CpuRank] [bigint] NULL,
	[PhysicalReadsRank] [bigint] NULL,
	[DurationRank] [bigint] NULL,
	[cacheobjtype] [nvarchar](35) NULL,
	[usecounts] [int] NOT NULL,
	[size_in_kb] [int] NULL,
	[tot_cpu_ms] [bigint] NULL,
	[tot_duration_ms] [bigint] NULL,
	[total_physical_reads] [bigint] NOT NULL,
	[total_logical_writes] [bigint] NOT NULL,
	[total_logical_reads] [bigint] NOT NULL,
	[last_execution_time] [datetimeoffset] NULL,
	[dbname] [nvarchar](128) NULL,
	[objectid] [int] NULL,
	[procname] [nvarchar](75) NULL,
	[stmt_text] [nvarchar](max) NULL,
	[ReasonforEarlyTermination] varchar(50) NULL,
	[QueryPlan] [xml] NULL,
	[Average_cpu] [decimal](38, 19) NULL,
	[Average_Duration] [decimal](38, 19) NULL,
	[ObservedWhen] [datetimeoffset] NOT NULL CONSTRAINT DF_worstqueryplans_ObservedWhen DEFAULT (SYSDATETIMEOFFSET())
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
*/


--02 - Single-use vs multi-use plans with storage space.sql
--##############################################################################
--
-- SAMPLE SCRIPTS TO ACCOMPANY "SQL SERVER 2017 ADMINISTRATION INSIDE OUT"
--
-- © 2018 MICROSOFT PRESS
--
--##############################################################################
--
-- CHAPTER 9: PERFORMANCE TUNING SQL SERVER
-- T-SQL SAMPLE 2
--

-- Measure ad hoc query plans
SELECT 
	PlanUse = CASE WHEN p.usecounts > 1 THEN '>1' ELSE '1' END
	, PlanCount = COUNT(1) 
	, SizeInMB = SUM(p.size_in_bytes / 1024. / 1024.)
FROM sys.dm_exec_cached_plans p
GROUP BY CASE WHEN p.usecounts > 1 THEN '>1' ELSE '1' END;

---03 - Analyzing cached execution plans in aggregate.sql

--##############################################################################
--
-- SAMPLE SCRIPTS TO ACCOMPANY "SQL SERVER 2017 ADMINISTRATION INSIDE OUT"
--
-- © 2018 MICROSOFT PRESS
--
--##############################################################################
--
-- CHAPTER 9: PERFORMANCE TUNING SQL SERVER
-- T-SQL SAMPLE 3
--

-- Find long-running queries
SELECT 
	UseCount = p.usecounts
	, PlanSize_KB  = p.size_in_bytes / 1024
	, CPU_ms	   = qs.total_worker_time / 1000  
	, Duration_ms  = qs.total_elapsed_time / 1000
	, ObjectType   = p.cacheobjtype + ' (' + p.objtype + ')'
	, DatabaseName = db_name(CONVERT(int, pa.value))
	, txt.ObjectID
	, qs.total_physical_reads
	, qs.total_logical_writes
	, qs.total_logical_reads
	, qs.last_execution_time
	, StatementText = REPLACE(REPLACE 
                    (SUBSTRING (txt.[text], qs.statement_start_offset / 2 + 1, 
                    CASE WHEN qs.statement_end_offset = -1 THEN LEN (CONVERT(nvarchar(max), txt.[text])) 
                         ELSE qs.statement_end_offset / 2 - qs.statement_start_offset / 2 + 1 
                    END), 
                    CHAR(13), ' '), CHAR(10), ' ') 
	, QueryPlan  = qp.query_plan	
	, qs.plan_handle 
FROM sys.dm_exec_query_stats qs 		
	INNER JOIN sys.dm_exec_cached_plans p ON p.plan_handle = qs.plan_handle 
	OUTER APPLY sys.dm_exec_plan_attributes (p.plan_handle) pa 
	OUTER APPLY sys.dm_exec_sql_text (p.plan_handle) AS txt
	OUTER APPLY sys.dm_exec_query_plan (p.plan_handle) qp
WHERE pa.attribute = 'dbid' 
ORDER BY qs.total_worker_time + qs.total_elapsed_time DESC;
GO

---01 - Observe blocking.sql

--##############################################################################
--
-- SAMPLE SCRIPTS TO ACCOMPANY "SQL SERVER 2017 ADMINISTRATION INSIDE OUT"
--
-- © 2018 MICROSOFT PRESS
--
--##############################################################################
--
-- CHAPTER 9: PERFORMANCE TUNING SQL SERVER
-- T-SQL SAMPLE 1
--
SELECT * 
FROM sys.dm_exec_sessions s 
	LEFT OUTER JOIN sys.dm_exec_requests r ON r.session_id = s.session_id;


---01 - Query plans with early abort reasons.sql

--##############################################################################
--
-- SAMPLE SCRIPTS TO ACCOMPANY "SQL SERVER 2017 ADMINISTRATION INSIDE OUT"
--
-- © 2018 MICROSOFT PRESS
--
--##############################################################################
--
-- CHAPTER 9: PERFORMANCE TUNING SQL SERVER
-- EXTRA T-SQL SAMPLE 1
--

-- Query plans with Early Abort Reasons
SELECT 
	UseCount = p.usecounts
	, PlanSize_KB = p.size_in_bytes / 1024
	, CPU_ms	    = qs.total_worker_time / 1000  
	, Duration_ms  = qs.total_elapsed_time / 1000
	, ObjectType   = p.cacheobjtype + ' (' + p.objtype + ')'
	, DatabaseName = db_name(convert(int, pa.value))
	, txt.ObjectID
,  qs.total_physical_reads
,  qs.total_logical_writes
,  qs.total_logical_reads
,  qs.last_execution_time
,  StatementText = REPLACE(REPLACE 
                    (SUBSTRING (txt.[text], qs.statement_start_offset / 2 + 1,
                    CASE WHEN qs.statement_end_offset = -1 THEN LEN (CONVERT(nvarchar(max), txt.[text])) 
                         ELSE qs.statement_end_offset / 2 - qs.statement_start_offset / 2 + 1 
                    END), 
                    CHAR(13), ' '), CHAR(10), ' ') 
,  QueryPlan  = qp.query_plan	
,  qs.plan_handle 
FROM sys.dm_exec_query_stats qs 		
	INNER JOIN sys.dm_exec_cached_plans p ON p.plan_handle = qs.plan_handle 
	OUTER APPLY sys.dm_exec_plan_attributes (p.plan_handle) pa 
	OUTER APPLY sys.dm_exec_sql_text (p.plan_handle) AS txt
	OUTER APPLY sys.dm_exec_query_plan (p.plan_handle) qp
	CROSS APPLY sys.dm_exec_text_query_plan(p.plan_handle, qs.statement_start_offset, qs.statement_end_offset) AS tqp
WHERE pa.attribute = 'dbid' 
	AND tqp.query_plan LIKE '%StatementOptmEarlyAbortReason%'
ORDER BY qs.total_worker_time + qs.total_elapsed_time DESC;
GO

--Chapter 09 - Performance tuning SQL Server

--##############################################################################
--
-- SAMPLE SCRIPTS TO ACCOMPANY "SQL SERVER 2017 ADMINISTRATION INSIDE OUT"
--
-- © 2018 MICROSOFT PRESS
--
--##############################################################################
--
-- CHAPTER 9: PERFORMANCE TUNING SQL SERVER
-- EXTRA T-SQL SAMPLE 2 (LAB)
--

-- In Connection 1, execute the following TSQL code:
DROP TABLE IF EXISTS AnyTable;
CREATE TABLE AnyTable (
	id INT NOT NULL IDENTITY(1,1 ) PRIMARY KEY,
	ANumber INT NOT NULL);
GO

INSERT INTO AnyTable (ANumber) VALUES (1),(3);
GO 

BEGIN TRAN Update1;

UPDATE AnyTable 
	SET ANumber = 4 where ANumber > 1;

-- In Connection 2, execute the following TSQL code:
SET TRANSACTION ISOLATION LEVEL SNAPSHOT;
BEGIN TRAN Update2;
UPDATE AnyTable WITH (UPDLOCK)
	SET ANumber = 4 where ANumber > 1;

--Back in Connection 1, execute the following TSQL code:
COMMIT TRAN Update1

-- Note that Connection 2 immediately fails, returning the following error message:
-- Msg 3960, Level 16, State 2, Line 8
-- Snapshot isolation transaction aborted due to update conflict. You cannot use snapshot isolation to access table 'dbo.AnyTable' directly or indirectly in database 'test' to update, delete, or insert the row that has been modified or deleted by another transaction. Retry the transaction or change the isolation level for the update/delete statement.







